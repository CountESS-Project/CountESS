[project]
name = 'countess'
dynamic = ["version"]
readme = "README.md"
authors = [
    { name = "Nick Moore", email="nick@zoic.org" },
    { name = "Alan Rubin", email="alan@rubin.id.au" },
]
maintainers = [
    { name = "Nick Moore", email="nick@zoic.org" },
]
description = "CountESS"
requires-python = ">=3.10"
classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Science/Research',
    'Operating System :: OS Independent',
    'Topic :: Scientific/Engineering :: Bio-Informatics',
]
dependencies = [
    'dnaio~=1.2.3',
    'duckdb~=1.3.1',
    'fqfa~=1.3.1',
    'more_itertools~=10.7.0',
    'numpy~=2.2.6',
    'pandas~=2.3.0',
    'psutil~=7.0.0',
    'pyarrow~=20.0.0',
    'rapidfuzz~=3.13.0',
    'scipy~=1.15.3',
    'tkinterweb~=3.23.5',
    'ttkthemes~=3.2.2',
    'typing_extensions~=4.14.0',
]

[project.optional-dependencies]
dev = [
    'black<24',
    'build~=1.2.2',
    'coverage~=7.9.1',
    'mypy~=1.16.1',
    'pylint~=3.3.7',
    'semver~=3.0.2',
    'types-psutil~=7.0.0',
    'types-ttkthemes~=3.2.4',
    'twine~=6.1.0',
    'packaging~=25.0',
    'pandas-stubs~=2.2.3',
    'pyarrow-stubs~=20.0.0',
    'pytest~=8.4.1',
    'pytest-socket~=0.7.0',
    'requests-mock~=1.12.1',
]

[project.entry-points.countess_plugins]
load_fastq = "countess.plugins.fastq:LoadFastqPlugin"
load_fasta = "countess.plugins.fastq:LoadFastaPlugin"
load_csv = "countess.plugins.csv:LoadCsvPlugin"
group_by = "countess.plugins.group_by:GroupByPlugin"
expression = "countess.plugins.expression:ExpressionPlugin"
pivot = "countess.plugins.pivot:PivotPlugin"
join = "countess.plugins.join:JoinPlugin"
#python = "countess.plugins.python:PythonPlugin"
save_csv = "countess.plugins.csv:SaveCsvPlugin"
regex_tool = "countess.plugins.regex:RegexToolPlugin"
variants = "countess.plugins.variant:VariantPlugin"
mutagenize = "countess.plugins.mutagenize:MutagenizePlugin"
data_table = "countess.plugins.data_table:DataTablePlugin"
correlation = "countess.plugins.correlation:CorrelationPlugin"
score = "countess.plugins.score:ScoringPlugin"
score_scaling = "countess.plugins.score_scale:ScoreScalingPlugin"
vampseq_score = "countess.plugins.vampseq:VampSeqScorePlugin"
variant_classifier = "countess.plugins.variant:VariantClassifier"
variant_converter = "countess.plugins.variant:VariantConverter"
frequency = "countess.plugins.frequency:FrequencyPlugin"

[project.entry-points.gui_scripts]
countess_gui = "countess.gui.main:main"

[project.entry-points.console_scripts]
countess_cmd = "countess.core.cmd:main"

[tool.setuptools]
packages = [
    'countess',
    'countess.core',
    'countess.gui',
    'countess.gui.icons',
    'countess.plugins',
    'countess.utils',
]

[tool.setuptools.dynamic]
version = { attr = "countess.VERSION" }
readme = { file = "README.md", content-type="text/markdown" }

[tool.pylint]
load-plugins = "pylint.extensions.bad_builtin"
bad-functions = ['print']
disable = [
    "consider-using-f-string",
    "consider-using-with",
    "duplicate-code",
    "fixme",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "unused-argument",
    "invalid-name",
    "no-else-return",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-statements",
    "too-few-public-methods",
    "too-many-lines",
    "too-many-positional-arguments",
    "too-many-public-methods",
    "too-many-return-statements",
    "unidiomatic-typecheck",
]
max-line-length = 120

[tool.black]
line-length = 120

[tool.pytest.ini_options]
addopts = "--strict-markers --disable-socket"
markers = [ "slow", "gui" ]

[tool.mypy]
plugins = [
#    "numpy.typing.mypy_plugin",
]
mypy_path = "mypy_stubs"
